<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Angularity </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/index.xml/</link>
    
    
    
    <updated>Mon, 15 Dec 2014 13:42:50 AEDT</updated>
    
    <item>
      <title>Angularity</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/about/main/</link>
      <pubDate>Mon, 15 Dec 2014 13:42:50 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/about/main/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;&lt;img src=&#34;/assets/logo.png&#34; alt=&#34;Angularity Logo&#34; /&gt;
 &lt;em&gt;Angularity&lt;/em&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Angularity is a philosophy of development.&lt;/p&gt;

&lt;p&gt;Our focus is maintaining uniformity of development across groups of developers who hold varying experience levels.&lt;/p&gt;

&lt;p&gt;Our contributors hold a collective vision of best-practice AngularJS development and have condensed this into a set of
tools and resources known as &lt;strong&gt;Angularity&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/about/intro/</link>
      <pubDate>Mon, 15 Dec 2014 13:42:50 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/about/intro/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Concept&lt;/h2&gt;

&lt;p&gt;Angularity is built upon &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; but does not require a per-project &lt;code&gt;gulpfile.js&lt;/code&gt;. You use it as a
npm global install as you would Gulp. But unlike Gulp it is self-contained.&lt;/p&gt;

&lt;p&gt;Angularity has a large emphasis on &lt;strong&gt;composition&lt;/strong&gt;. Each project contains one deployable application and any number of
additional non-deployable applications (as needed for development). Each application features a
&lt;a href=&#34;http://blog.ploeh.dk/2011/07/28/CompositionRoot/&#34;&gt;Composition Root&lt;/a&gt; for both Javascript and SASS.&lt;/p&gt;

&lt;p&gt;SASS will inherantly bundle any &lt;code&gt;@import&lt;/code&gt;ed files. We use &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt; to bundle &lt;code&gt;require()&lt;/code&gt;d
Javascript, HTML template (strings), and sprited images (coming soon). This minimises the application footprint to only
that which is needed.&lt;/p&gt;

&lt;p&gt;If you have experience with NInject for .NET, or RobotLegs or Parsley in Flash/Flex these concepts will be familiar to
you. You will see from our &lt;a href=&#34;/style/composition&#34;&gt;style guide&lt;/a&gt; that this pattern is also a superior approach for
AngularJS.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;Primarily Angularity is a &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; build tool. Its features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single &lt;code&gt;npm global install&lt;/code&gt; for all projects.&lt;/li&gt;
&lt;li&gt;Bundling of &lt;code&gt;require()&lt;/code&gt;&amp;rsquo;d files per &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/ECMAScript#ECMAScript_Harmony_.286th_Edition.29&#34;&gt;ECMAScript 6&lt;/a&gt; syntax
(using &lt;a href=&#34;https://github.com/6to5/6to5ify&#34;&gt;6to5ify&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Composition of &lt;em&gt;html&lt;/em&gt; templates in &lt;em&gt;javascript&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jshint.com/about/&#34;&gt;jsHint&lt;/a&gt; linting.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sass-lang.com/&#34;&gt;SASS&lt;/a&gt; 3.2 (using &lt;a href=&#34;http://libsass.org/&#34;&gt;libsass&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt; for web dependencies.&lt;/li&gt;
&lt;li&gt;Bower or node packages for shared code.&lt;/li&gt;
&lt;li&gt;Javascript unit testing (using &lt;a href=&#34;http://karma-runner.github.io/0.12/index.html&#34;&gt;Karma&lt;/a&gt; and
&lt;a href=&#34;http://jasmine.github.io/2.0/introduction.html&#34;&gt;Jasmine 2.0&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Source maps for Javascript.&lt;/li&gt;
&lt;li&gt;Source maps for CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At its heart, none of these features are specifically tied to &lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;. However much of the
material you will find on this site is geared to Angular development.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Suitability&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;You should use &lt;em&gt;Angularity&lt;/em&gt; when&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Your organisation has a large code/asset library and want to include only the elements you &lt;code&gt;require()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You want your development teams&amp;rsquo; build tooling to be turn-key and immutable.&lt;/li&gt;
&lt;li&gt;You develop with &lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; and would like a path to
&lt;a href=&#34;http://en.wikipedia.org/wiki/ECMAScript#ECMAScript_Harmony_.286th_Edition.29&#34;&gt;ECMAScript 6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You use &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SASS&lt;/a&gt;, or are prepared to switch, and can live without
&lt;a href=&#34;http://compass-style.org/&#34;&gt;Compass&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You intend to minify or obfuscate your Javascript.&lt;/li&gt;
&lt;li&gt;You your browser support list permits &lt;a href=&#34;http://kangax.github.io/compat-table/es5/&#34;&gt;ECMAScript 5.1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You would like your build tool to be a self contained npm package with the option of a global install.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;You should fork &lt;em&gt;Angularity&lt;/em&gt; when&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You want to use a CSS preprocessor other than &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SASS&lt;/a&gt; (You need replace Libsass).&lt;/li&gt;
&lt;li&gt;You would like to use &lt;a href=&#34;http://compass-style.org/&#34;&gt;Compass&lt;/a&gt; with your SASS (You need replace Libsass with Ruby Sass).&lt;/li&gt;
&lt;li&gt;You need to support &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS 1.x&lt;/a&gt;, Internet Explorer 8 (or lower), or any other platform
inconsistent with &lt;a href=&#34;https://6to5.org/&#34;&gt;6to5&lt;/a&gt; generated code (You need to remove the 6to5ify transform)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;You should avoid &lt;em&gt;Angularity&lt;/em&gt; when&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Your projects are all different and need customised build steps that cannot be generalised.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;You should be aware&amp;hellip;&lt;/h3&gt;

&lt;p&gt;We have additional features that support &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt; IDE and
&lt;a href=&#34;https://www.google.com.au/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=team%20city&#34;&gt;Team City&lt;/a&gt;
Continuous Integration server.&lt;/p&gt;

&lt;p&gt;Following version 1.0.0 we will be looking for contributors to add first class support for other popular IDEs and CI
reporters.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Angularity is about uniformity. Per-project customisation is minimal. There is customisation but it is focused on
supporting different environments, such as development vs CI server.&lt;/p&gt;

&lt;p&gt;If you can generalise you build requirements but want different build steps to those provided then you can fork
Angularity and make your own flavour.&lt;/p&gt;

&lt;p&gt;However if you develop a wide variety of applications we recommend you use &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;, which Angularity
uses under the hood.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/about/roadmap/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:03 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/about/roadmap/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Version 0.1.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Command line invocation of tasks.&lt;/li&gt;
&lt;li&gt;Customisation of jsHint reporter.&lt;/li&gt;
&lt;li&gt;Customisation of Karma using &lt;code&gt;karma.conf.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;CDN fingerprinting for the &lt;code&gt;release&lt;/code&gt; task.&lt;/li&gt;
&lt;li&gt;Retire &lt;code&gt;angularity.json&lt;/code&gt; and move contents to &lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Webstorm integration.&lt;/li&gt;
&lt;li&gt;Documentation:

&lt;ul&gt;
&lt;li&gt;Basic usage&lt;/li&gt;
&lt;li&gt;Coding style&lt;/li&gt;
&lt;li&gt;Troubleshooting.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Version 0.x.0&lt;/h3&gt;

&lt;p&gt;To be determined.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Version 1.0.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Global invocation defers to a local Angularity instance, where present.&lt;/li&gt;
&lt;li&gt;Synchronisation task the keep selected &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; properties in sync.&lt;/li&gt;
&lt;li&gt;Interactive command line menus.&lt;/li&gt;
&lt;li&gt;Sprite sheeting my browserify composition.&lt;/li&gt;
&lt;li&gt;Better extensibility (code cleanup, modularisation)&lt;/li&gt;
&lt;li&gt;Unit/Integration tests.&lt;/li&gt;
&lt;li&gt;Documentation:

&lt;ul&gt;
&lt;li&gt;Angularity architecture&lt;/li&gt;
&lt;li&gt;Guidance on extending Angularity.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/installation/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:30 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/installation/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Install git&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://git-scm.com/downloads&#34;&gt;&lt;code&gt;http://git-scm.com/downloads&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ensure that you choose the correct binary for your system.
Meaning that 64 bit systems should choose the 64 bit binary.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;windows platform&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Choose to &lt;strong&gt;use GIT from the command prompt&lt;/strong&gt;.&lt;br/&gt;
&lt;img src=&#34;/start/installation-git-1.png&#34; alt=&#34;Windows git installation step #1&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose to &lt;strong&gt;checkout Windows-style, commit Unit-style&lt;/strong&gt; for line endings.&lt;br/&gt;
&lt;img src=&#34;/start/installation-git-2.png&#34; alt=&#34;Windows git installation step #2&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Install node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://nodejs.org/download/&#34;&gt;&lt;code&gt;http://nodejs.org/download/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again nsure that you choose the correct binary for your system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/start/installation-node.png&#34; alt=&#34;Install node&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Choose the &lt;strong&gt;default settings&lt;/strong&gt; whenever prompted.&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;Windows&lt;/strong&gt; platform the installer will add a &lt;strong&gt;path&lt;/strong&gt; entry to node. For that to be active you will most likely
need to reboot. Once you can see the path to node in the console then you are ready.&lt;/p&gt;

&lt;p&gt;echo %PATH%&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Update npm&lt;/h2&gt;

&lt;p&gt;Even if you just installed &lt;code&gt;node&lt;/code&gt; you may be running npm older than &lt;strong&gt;npm 2.0.0&lt;/strong&gt;.
In that case it is worth updating.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g npm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On windows you may have some difficulty and should follow the troubleshooting
&lt;a href=&#34;https://github.com/npm/npm/wiki/Troubleshooting#upgrading-on-windows&#34;&gt;instructions&lt;/a&gt; from the outset.&lt;/p&gt;

&lt;p&gt;Be aware however that older projects that you may also be working on may not be compatible with npm 2.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Install Bower&lt;/h2&gt;

&lt;p&gt;Most angularity projects want to utilise &lt;a href=&#34;http://bower.io/&#34;&gt;bower&lt;/a&gt;.
Perform a global installation using npm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Install Angularity&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Latest Release&lt;/h3&gt;

&lt;p&gt;Use the latest release unless if you are new to Angularity or just want the most stable version.&lt;/p&gt;

&lt;p&gt;Perform a global installation using npm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g angularity
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;&lt;em&gt;or&lt;/em&gt; Pre-Release&lt;/h3&gt;

&lt;p&gt;You can install from github. However this is considered bleeding edge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g angularity/node-angularity
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;&lt;em&gt;or&lt;/em&gt; Tagged Release&lt;/h3&gt;

&lt;p&gt;You can install from github from a tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g angularity/node-angularity#&amp;lt;TAG&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Check installation&lt;/h2&gt;

&lt;p&gt;Run the angularity version command to make sure the installation worked.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angularity -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Install source code&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you wish to develop or contribute to the Angularity project you will need to
&lt;a href=&#34;https://github.com/angularity/node-angularity/fork&#34;&gt;fork the project&lt;/a&gt; on github.&lt;/p&gt;

&lt;p&gt;Get local a working copy of your fork.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/node-angularity.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Force the global install to defer to this working copy. You still need to have performed the global install above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm link
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to keep your fork in sync with the main repository before you start working on any patch.
This &lt;a href=&#34;https://help.github.com/articles/syncing-a-fork/&#34;&gt;how to on Github&lt;/a&gt; is most helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Anatomy</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/anatomy/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:41 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/anatomy/</guid>
      <description>

&lt;p&gt;The best place to start on project anatomy is to create a blank project.&lt;/p&gt;

&lt;p&gt;Angularity has an &lt;a href=&#34;/tasks/init&#34;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; task that will create a new project and initialise it. By default, it will
create a new subdirectory.&lt;/p&gt;

&lt;p&gt;All Angularity tasks will have default values for any options. So we can go ahead and invoke &lt;code&gt;init&lt;/code&gt; simply as below.&lt;/p&gt;

&lt;p&gt;angularity init&lt;/p&gt;

&lt;p&gt;You will receive the following files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/anatomy-directory.png&#34; alt=&#34;new project directory&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Composition Root&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;init&lt;/code&gt; task will create an &lt;code&gt;/app&lt;/code&gt; directory with files &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;index.js&lt;/code&gt;, &lt;code&gt;index.scss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These files compose the primary application for this project. The entire &lt;code&gt;/app&lt;/code&gt; directory should be version controlled.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can create additional applications in sub-folders. However they will be development only since they will
 not be deployed by the &lt;code&gt;release&lt;/code&gt; task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Angularity generates other directories as part of its build process. These are prefixed with &lt;code&gt;app&lt;/code&gt;, such as &lt;code&gt;app-build&lt;/code&gt;
and &lt;code&gt;app-test&lt;/code&gt;. These generated directories should be ignored for version control.&lt;/p&gt;

&lt;p&gt;All other directories are considered your local library. These files must be &lt;code&gt;require()&lt;/code&gt;d or &lt;code&gt;@import&lt;/code&gt;ed into &lt;code&gt;index.js&lt;/code&gt;
or &lt;code&gt;index.scss&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Git Ignore&lt;/h2&gt;

&lt;p&gt;Presuming you are using GIT, this file ensures version control will ignore generated directories and bower and npm
packages.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;JS Hint Config&lt;/h2&gt;

&lt;p&gt;A javascript linter is important to ensure code quality. Angularity uses &lt;a href=&#34;http://jshint.com/&#34;&gt;JS Hint&lt;/a&gt;. The JS Hint
rule set is encoded in the &lt;code&gt;.jshintrc&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Angularity Config&lt;/h2&gt;

&lt;p&gt;Angularity has a limited number of settings that control your project. These are found in &lt;code&gt;angularity.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Node and Bower Config&lt;/h2&gt;

&lt;p&gt;The composition roots may import from any node or bower packages. The &lt;code&gt;init&lt;/code&gt; task creates basic &lt;code&gt;package.json&lt;/code&gt; and
&lt;code&gt;bower.json&lt;/code&gt; for node and bower respectively.&lt;/p&gt;

&lt;p&gt;Each item in the bower &lt;code&gt;dependencies&lt;/code&gt; map will be considered distributions and contribute directly to the HTML. Each
item in bower &lt;code&gt;devDependencies&lt;/code&gt; will not contribute to the HTML but may be &lt;code&gt;require()&lt;/code&gt;d or &lt;code&gt;@import&lt;/code&gt;ed into the
composition roots.&lt;/p&gt;

&lt;p&gt;Each item in the node package &lt;code&gt;depencencies&lt;/code&gt; or &lt;code&gt;devDependencies&lt;/code&gt; may be &lt;code&gt;require()&lt;/code&gt;d or &lt;code&gt;@import&lt;/code&gt;ed into the
composition roots. You may use the simple &lt;code&gt;require(&amp;lt;PACKAGE_NAME&amp;gt;)&lt;/code&gt;, meaning that the experience is the same as
developing for the node platform.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Karma Config&lt;/h2&gt;

&lt;p&gt;Angularity uses &lt;a href=&#34;http://karma-runner.github.io/&#34;&gt;Karma&lt;/a&gt; for unit tests. This is configured using &lt;code&gt;karma.conf.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since Angularity performs a build step, the &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;reporter&lt;/code&gt; entries will be overwritten by Angularity to create a
derived file &lt;code&gt;/app-test/karma.conf.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;&amp;hellip; Everything Else&lt;/h2&gt;

&lt;p&gt;The remaining directories (baring installed bower and node packages) are considered your local library.&lt;/p&gt;

&lt;p&gt;There are no special directories for sprites, images, javascript, html partials, css and scss. It is up to you what
conventions you choose. However you organise these files, the composition root will import them will fully relative
paths.&lt;/p&gt;

&lt;p&gt;Any file can also import from bower and node packages that are installed, much like you would do when developing for
the NodeJS platform.&lt;/p&gt;

&lt;p&gt;This will be more apparent in the next section, when we look at an actual project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Todo Example</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/example/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:41 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/example/</guid>
      <description>

&lt;p&gt;Now that we are familiar with a blank project, what does an actual project look like? Inevitably Angularity has a
&lt;a href=&#34;https://github.com/angularity/angularity-todo-es5&#34;&gt;Todo Application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can go ahead and clone it using Git.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default &lt;code&gt;git clone&lt;/code&gt; will create a subdirectory. If you have been working with the blank project from last page,
make sure that you are back in the parent directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/angularity/angularity-todo-es5.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;Obviously there will be a few external dependencies (not least AngularJS) so go ahead and do a bower and npm install in
the project directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install

bower install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Composition Root&lt;/h2&gt;

&lt;p&gt;The place to start is always the composition root, so take a look at &lt;code&gt;/app/index.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var todoRoutes            = require(&#39;../todo/todo-routes&#39;),
    escapeKeyDirective    = require(&#39;examplelib/interaction/escape-key-directive&#39;),
    focusElementDirective = require(&#39;examplelib/interaction/focus-element-directive&#39;),
    LocalStorage          = require(&#39;../storage/local-storage&#39;);

angular.module(&#39;app&#39;, [ &#39;ui.router&#39;, &#39;ui.bootstrap&#39; ])
  .config(todoRoutes)
  .directive(&#39;escape&#39;, escapeKeyDirective.forAttribute(&#39;escape&#39;))
  .directive(&#39;focus&#39;, focusElementDirective.forAttribute(&#39;focus&#39;))
  .value(&#39;storage&#39;, new LocalStorage(&#39;todos-angularjs&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Module definition&lt;/h3&gt;

&lt;p&gt;Per the module definition we see that we can name the module anything we like - An angularity project is not split
between angular modules. Unless we intend this project to be a module for distribution the name does not matter.&lt;/p&gt;

&lt;p&gt;We can see here that module definition lists a few dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://angular-ui.github.io/ui-router/site/#/api/ui.router&#34;&gt;UI router&lt;/a&gt; because its a better router.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://angular-ui.github.io/bootstrap/&#34;&gt;UI bootstrap&lt;/a&gt; for bootstrap components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are satisfied by bower. If you look at the &lt;code&gt;bower.json&lt;/code&gt; you will see them listed. The first place to start for any
new project is usually to sort out this list of dependencies. Each bower dependency is automatically injected into the
 &lt;code&gt;index.html&lt;/code&gt; during the build process.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Routes&lt;/h3&gt;

&lt;p&gt;The routes are a key part of composition, for this project they happen to be found in &lt;code&gt;/todo/todo-routes.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * &amp;lt;p&amp;gt;Routing for the to-do app.&amp;lt;/p&amp;gt;
 * @ngInject
 * @param {object} $StateProvider
 * @param {object} $urlRouterProvider
 */
function todoRoutes($stateProvider, $urlRouterProvider) {
  &#39;use strict&#39;;
  $urlRouterProvider.otherwise(&#39;/&#39;)
  $stateProvider
    .state(&#39;home&#39;, {
      url:        &#39;/:status&#39;,
      template:   require(&#39;./view/todo.html&#39;),
      controller: require(&#39;./controller/todo-controller&#39;)
    });
}
module.exports = todoRoutes;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a pretty simple example of &lt;a href=&#34;http://angular-ui.github.io/ui-router/site/#/api/ui.router&#34;&gt;UI-router&lt;/a&gt;, with some
important distinctions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As with every file we will import into the composition root, we must use the explicit annotation &lt;code&gt;@ngInject&lt;/code&gt;. This
is super important to ensure proper minification.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We can directly &lt;code&gt;require()&lt;/code&gt; the template and controller items. We do not need to hack the template cache or map the
controller separately.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Routes are also composition so there is no reason why this cannot be defined in-line in the composition root. Similarly,
you can split your composition root over several files as appropriate.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Directives&lt;/h3&gt;

&lt;p&gt;The todo project maps directives in a somewhat confusing way, but does so to illustrate an important point.&lt;/p&gt;

&lt;p&gt;Each of the directives shown, &lt;code&gt;escapeKeyDirective&lt;/code&gt; and &lt;code&gt;focusElementDirective&lt;/code&gt; are invoked by attribute and need to read
a value from that attribute. However, in the configuration root we can map them against any attribute and need to tell
them what attribute that is.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;forAttribute()&lt;/code&gt; method is a factory for creating the directive. That way we can close it as
 &lt;code&gt;focusElementDirective.forAttribute(&#39;focus&#39;)&lt;/code&gt; and yield a function for mapping.&lt;/p&gt;

&lt;p&gt;Lets take a closer look at that code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;focusElementDirective.forAttribute = function forAttribute(attribute) {
  return /** @ngInject */ function ($timeout) {
    return focusElementDirective($timeout, attribute);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that is happening is that we capture the given &lt;code&gt;attribute&lt;/code&gt; name and pass it to the directive along with the injected
&lt;code&gt;$timeout&lt;/code&gt; dependency.&lt;/p&gt;

&lt;p&gt;Note the use of &lt;code&gt;@ngInject&lt;/code&gt; comment inline, since it is the inner function that is provided to the Angular directive
map.&lt;/p&gt;

&lt;p&gt;These implementations are maximally correct. In a practical situation you may prefer to avoid the &lt;code&gt;forAttribute()&lt;/code&gt;
factory and just hard-code the directive to a particular element. In this case you must ensure you map the directive
against the same name in the composition root.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Factories and Services&lt;/h3&gt;

&lt;p&gt;This example does not have and factories or services, but instead maps a &lt;code&gt;value()&lt;/code&gt;. This is because the &lt;code&gt;LocalStorage&lt;/code&gt;
component does not require any dependency injection and does require implementation. As such it perhaps a bad example.&lt;/p&gt;

&lt;p&gt;Be that as it may, factories and services may be mapped just as easily by specifying an import.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Building&lt;/h2&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Test&lt;/h3&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Watch&lt;/h3&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;Release&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Using Webstorm</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/webstorm/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:41 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/start/webstorm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Angularity favours development in the &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt; IDE. In time we hope to
similarly support other popular IDEs. If you don&amp;rsquo;t use Webstorm you may skip this section.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Init</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/tasks/init/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:30 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/tasks/init/</guid>
      <description>&lt;pre&gt;&lt;code&gt;  The &amp;quot;init&amp;quot; task initialises a blank project and optionally an IDE
  environment. The given options initialise project defaults. Where omitted the
  global default will be in effect for the project.

  The following steps are taken. Some steps are gated by respective a flag.
  Default options may be globally defined or reset using the --defaults
  option.

  * project directory    exists, else create    --subdir
  * /app                 exists, else create
  * /app/*.html          exists, else create
  * /app/*.scss          exists, else create
  * angularity.json      exists, else create
  * package.json         exists, else create    --npm
  * bower.json           exists, else create    --bower
  * karma.conf.js        exists, else create    --karma
  * .jshintrc            exists, else create    --jshint
  * .gitignore           exists, else create    --gitignore
  * run IDE task                                --ide

  By default, a subdirectory is created for the project

  Where run on an exising project existing files will not be altered, delete
  existing files in order to change properties.

  Both the npm and bower packages are initially set private which you will need
  to clear in order to publish.

  Available IDE tasks include:
  webstorm

  Any given IDE is initialised per its task defaults. Use the task separately
  to review these options.

Examples:
  angularity init -n todo -i webstorm      Create &amp;quot;todo&amp;quot; and initialise webstorm
  angularity init --defaults -n pending    Change the name default to &amp;quot;pending
  angularity init --defaults reset         Reset defaults


Options:
  --help, -h, -?     This help message
  --defaults, -z     Set defaults
  --subdir, -s       Create a sub-directory per name             [default: true]
  --name, -n         The project name                    [default: &amp;quot;my-project&amp;quot;]
  --version, -v      The project version                      [default: &amp;quot;0.0.0&amp;quot;]
  --description, -d  The project description                       [default: &amp;quot;&amp;quot;]
  --tag, -t          A project tag                                   [default: ]
  --port, -p         A port for the development web server   [default: &amp;quot;random&amp;quot;]
  --npm              Create package.json                         [default: true]
  --bower            Create bower.json                           [default: true]
  --karma            Create karma.conf.js                        [default: true]
  --jshint           Create .jshintrc                            [default: true]
  --gitignore        Create .gitignore                           [default: true]
  --ide              Run an IDE initialisation task            [default: &amp;quot;none&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Webstorm</title>
      <link>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/tasks/webstorm/</link>
      <pubDate>Mon, 15 Dec 2014 13:43:30 AEDT</pubDate>
      
      <guid>http://demo.mathletics.com/static.mathletics.com/angularity.github.io/tasks/webstorm/</guid>
      <description>&lt;pre&gt;&lt;code&gt;  The &amp;quot;webstorm&amp;quot; task initialises webstorm for a project in the current working
  directory and launches the IDE.

  Where the IDE is installed in a non-standard location the full path to the
  IDE should be used in place of the boolean in --launch.

  The following steps are taken. Some steps are gated by respective a flag.
  Default options may be globally defined or reset using the --defaults
  option.

  * Setup project (resources, debug config, suppressors)   --project
  * Create external tools that launch angularity           --tools
  * Set coding style rules                                 --rules
  * Add code templates                                     --templates
  * Launch IDE                                             --launch

Examples:
  angularity webstorm                              Run this task
  angularity webstorm --defaults -l &amp;lt;some-path&amp;gt;    Set a default executable path
  angularity webstorm --defaults reset             Reset defaults


Options:
  --help, -h, -?   This help message
  --defaults, -z   Set defaults
  --subdir, -s     Navigate to the sub-directory specified
  --project, -p    Setup project                                 [default: true]
  --tools, -t      Install external tools                        [default: true]
  --rules, -r      Set style rules                               [default: true]
  --templates, -t  Add code templates                            [default: true]
  --launch, -l     Launch the IDE following setup                [default: true]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>